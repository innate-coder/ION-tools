---
version: '2.0'
name: re-instantiate_workbook
workflows:

#######################################
################ MAIN #################
#######################################

  re-instantiate_starting:
    input:
      - operationType
      - operationParams
      - operationExecution
      - vnfInventory

    output:
      operationParams: <% $.operationParams %>
      operationType: <% $.operationType %>
      vnfInventory: <% $.vnfInventory %>
      operationExecution: <% $.operationExecution %>
      originalResourceModel: <% $.vnfInventory.get(resourceModel, {}) %>
      vnfcToReInstantiate: <% $.vnfcToReInstantiate %>
      flatResourceModel: <% $.flatResourceModel %>
      stackParams: <% $.stackParams %>
      serverNfvId: <% $.serverNfvId %>
      expectedModel: <% $.expectedModel %>

    output-on-error:
      error_message: <% $.get(error_message, 'Early failure happens in re-instantiate_starting') %>

    tasks:
      # Calculate the actual resource model
      generate_model_from_config:
        action: cbam.generate_model_from_config
        input:
          vnf_template: <% $.vnfInventory.vnfTemplate %>
          expected_nfv_model: <% $.vnfInventory.nfvModel %>
        publish:
          expectedModel: <% task(generate_model_from_config).result %>
        publish-on-error:
          error_message: <% task(generate_model_from_config).result %>
        on-success:
          - calculate_stack_params

      # Calculate the actutal stack parameters
      calculate_stack_params:
        action: cbam.calculate_stack_params
        input:
          vnf_inventory: <% $.vnfInventory %>
          expected_nfv_model: <% $.vnfInventory.nfvModel %>
          expected_model: <% $.expectedModel %>
        publish:
          stackParams: <% task(calculate_stack_params).result %>
        publish-on-error:
          error_message: <% task(calculate_stack_params).result %>
        on-success:
          - add_slotId_stack_params

      add_slotId_stack_params:
        action: cbam.evaluate_javascript
        input:
          javascript: javascript/assignSlotIDs.js
          include: []
          context:
            stack_params: <% $.stackParams %>
            resource_model: <% $.vnfInventory.resourceModel %>
            operation_params: <% $.operationParams %>
        publish:
          stackParams: <% task(add_slotId_stack_params).result %>
        publish-on-error:
          error_message: <% task(add_slotId_stack_params).result %>
        on-success:
          - add_zones_stack_params

      add_zones_stack_params:
        action: cbam.evaluate_javascript
        input:
          javascript: javascript/assignZones.js
          include: []
          context:
            stack_params: <% $.stackParams %>
            resource_model: <% $.vnfInventory.resourceModel %>
            nfv_model: <% $.vnfInventory.nfvModel %>
        publish:
          stackParams: <% task(add_zones_stack_params).result %>
        publish-on-error:
          error_message: <% task(add_zones_stack_params).result %>
        on-success:
          - add_cpCoresAndCfp_stack_params

      add_cpCoresAndCfp_stack_params:
        action: cbam.evaluate_javascript
        input:
          javascript: javascript/assignCpCoresAndCfp.js
          include: []
          context:
            stack_params: <% $.stackParams %>
            resource_model: <% $.vnfInventory.resourceModel %>
            nfv_model: <% $.vnfInventory.nfvModel %>
            operation_params: <% $.operationParams %>
        publish:
          stackParams: <% task(add_cpCoresAndCfp_stack_params).result %>
        publish-on-error:
          error_message: <% task(add_cpCoresAndCfp_stack_params).result %>
        on-success:
          - add_smbios_stack_params

      add_smbios_stack_params:
        action: cbam.evaluate_javascript
        input:
          javascript: javascript/generateSmbios.js
          include: []
          context:
            stack_params: <% $.stackParams %>
            resource_model: <% $.vnfInventory.resourceModel %>
            nfv_model: <% $.vnfInventory.nfvModel %>
            operation_params: <% $.operationParams %>
        publish:
          stackParams: <% task(add_smbios_stack_params).result %>
        publish-on-error:
          error_message: <% task(add_smbios_stack_params).result %>
        on-success:
          - check_for_provided_vnfc_id

      check_for_provided_vnfc_id:
        action: std.noop
        publish:
          vnfcToReInstantiate: <% $.operationParams.additionalParams.get(vnfcToReInstantiate) %>
        on-success:
          - flatten_resource_model: <% $.operationParams.additionalParams.get(vnfcToReInstantiate, null) != null %>

      flatten_resource_model:
        action: cbam.hierarchical_to_flat_resource_model
        input:
          hierarchical_resource_model: <% $.vnfInventory.resourceModel %>
        publish:
          flatResourceModel: <% task(flatten_resource_model).result %>
        publish-on-error:
          error_message: <% task(flatten_resource_model).result %>
        on-success:
          - get_instance_nfv_id

      get_instance_nfv_id:
        action: std.javascript
        input:
          context:
            flatResourceModel: <% $.flatResourceModel %>
            vnfcToReInstantiate: <% $.vnfcToReInstantiate %>
          script: |
            var slotIds = [];
            var vnfcNames = [];
            var nfvIds = [];

            // fill vnfcNames, slotIds and nfvIds arrays with the VNFC Ids of all the already deployed VMs
            for(key in $.flatResourceModel) {
              if ((/loadBalancerAspectGroup.[0-9]+.loadBalancerInstanceGroup.0.loadBalancerServerInstance/.test(key)) || (/mgRedundantAspectGroup.[0-9]+.mgWorking.mgInstanceGroup.0.mgServerInstance/.test(key)) || (/mgRedundantAspectGroup.[0-9]+.mgProtect.mgInstanceGroup.0.mgServerInstance/.test(key)) || (/oamAspectGroup.0.OAMStandby.oamInstanceGroup.0.oamServerInstance/.test(key)) || (/oamAspectGroup.0.OAMActive.oamInstanceGroup.0.oamServerInstance/.test(key))) {
                  slotIds.push($.flatResourceModel[key].metadata.nokia_vnf_slotId);
                  vnfcNames.push($.flatResourceModel[key].attributes.name);
                  nfvIds.push(key);
              }
            }
            try {
                // check if input is included in slotIds array
                if (slotIds.indexOf($.vnfcToReInstantiate) >= 0 && $.vnfcToReInstantiate.length <= 2 && $.vnfcToReInstantiate.length > 0) {
                      var slotIndex = slotIds.indexOf($.vnfcToReInstantiate);
                      return nfvIds[slotIndex];
                }
                // check if input is included in vnfcNames array
                else if (vnfcNames.indexOf($.vnfcToReInstantiate) >= 0 && $.vnfcToReInstantiate.length > 2) {
                      var NameIndex = vnfcNames.indexOf($.vnfcToReInstantiate);
                      return nfvIds[NameIndex];
                }
                // check if input is included in nfvIds array
                else if (nfvIds.indexOf($.vnfcToReInstantiate) >= 0 && $.vnfcToReInstantiate.length > 2) {
                      return $.vnfcToReInstantiate;
                }
                else
                {
                      throw new Error('Invalid VNFC Id was provided');
                }
            }
            catch (error) {
                var customMessage = error.message + ": " + $.vnfcToReInstantiate;
                return customMessage;
            }
        publish:
          serverNfvId: <% task(get_instance_nfv_id).result %>
        publish-on-error:
          error_message: <% task(get_instance_nfv_id).result %>
        on-success:
          - populate_vm_slot_id_ansible

      populate_vm_slot_id_ansible:
        action: std.javascript
        input:
          context:
            stack_params: <% $.stackParams %>
            flatResourceModel: <% $.flatResourceModel %>
            serverNfvId: <% $.serverNfvId %>
          script: |
            $.stack_params.cbam.resources.slotIdAnsible = "[" + "'" +  $.flatResourceModel[$.serverNfvId].metadata.nokia_vnf_slotId + "']"
            return $.stack_params
        publish:
          stackParams:  <% task(populate_vm_slot_id_ansible).result %>
        publish-on-error:
          error_message: <% task(populate_vm_slot_id_ansible).result %>
        on-success:
          - set_vnfc_present_zero

      set_vnfc_present_zero:
        action: std.javascript
        input:
          context:
            stackParams: <% $.stackParams %>
            serverNfvId: <% $.serverNfvId %>
          script: |
            splittedVnfc = $.serverNfvId.split('.')
            actual = $.stackParams.cbam.resources
            for (i=0; i < splittedVnfc.length; i++) {
              actual = actual[splittedVnfc[i]]
              if (actual.hasOwnProperty('present')) {
                actual.present = 0
                break
              }
            }
            return $.stackParams
        publish:
          stackParams: <% task(set_vnfc_present_zero).result %>
        publish-on-error:
          error_message: <% task(set_vnfc_present_zero).result %>

  re-instantiate_processing:
    input:
      - operationParams
      - operationType
      - vnfInventory
      - operationExecution
      - originalResourceModel
      - vnfcToReInstantiate
      - flatResourceModel
      - stackParams
      - serverNfvId
      - expectedModel

    output-on-error:
      error_message: <% $.get(error_message, 'Early failure happens in re-instantiate_processing') %>

    tasks:

      manipulate_stack:
        action: cbam.manipulate_stack
        input:
          vnf_inventory: <% $.vnfInventory %>
          stack_params: <% $.stackParams %>
          operation_type: <% $.operationType %>
        publish-on-error:
          error_message: <% task(manipulate_stack).result %>
        on-success:
          - wait_for_stack

      wait_for_stack:
        action: cbam.wait_for_stack
        input:
          stack_id: <% $.vnfInventory.get(stackId, null) %>
          operation_type: <% $.operationType %>
        publish-on-error:
          error_message: <% task(wait_for_stack).result %>
        on-success:
          - set_vnfc_present_one

      set_vnfc_present_one:
        action: std.javascript
        input:
          context:
            stackParams: <% $.stackParams %>
            serverNfvId: <% $.serverNfvId %>
          script: |
            splittedVnfc = $.serverNfvId.split('.')
            actual = $.stackParams.cbam.resources
            for (i=0; i < splittedVnfc.length; i++) {
              actual = actual[splittedVnfc[i]]
              if (actual.hasOwnProperty('present')) {
                actual.present = 1
                break
              }
            }
            return $.stackParams
        publish:
          stackParams: <% task(set_vnfc_present_one).result %>
        publish-on-error:
          error_message: <% task(set_vnfc_present_one).result %>
        on-success:
          - update_stack_change_to_1

      update_stack_change_to_1:
        workflow: cbam_main_action
        input:
          vnfInventory: <% $.vnfInventory %>
          stackParams: <% $.stackParams %>
          expectedNfvModel: <% $.vnfInventory.nfvModel %>
          expectedModel: <% $.expectedModel %>
          operationType: <% $.operationType %>
          originalResourceModel: <% $.originalResourceModel %>
        publish:
          vnfInventory: <% task(update_stack_change_to_1).result.vnfInventory %>
        publish-on-error:
          vnfInventory: <% task(update_stack_change_to_1).result.vnfInventory %>
          error_message: <% task(update_stack_change_to_1).result.error_message %>
        on-success:
          - prepare_ansible_inventory_after_rebuild

      prepare_ansible_inventory_after_rebuild:
        action: cbam.prepare_ansible_inventory
        input:
          vnf_inventory: <% $.vnfInventory %>
        publish:
          ansibleInventory: <% task(prepare_ansible_inventory_after_rebuild).result %>
        publish-on-error:
          error_message: <% task(prepare_ansible_inventory_after_rebuild).result %>
        on-success:
          - checkVm_state_after_rebuild

      checkVm_state_after_rebuild:
        action: cbam.run_playbook_extension
        input:
          action:
            ansible: ansible/checkVmsUp.yaml
          operation_parameters: <% $.operationParams %>
          vnf_inventory: <% $.vnfInventory %>
          stack_params: <% $.stackParams %>
          ansible_inventory: <% $.ansibleInventory %>
        publish-on-error:
          error_message: <% task(checkVm_state_after_rebuild).result %>
        on-success:
          - update_vnf_inventory_successful_rebuild

      update_vnf_inventory_successful_rebuild:
        action: cbam.update_vnf_inventory
        input:
          resource_model: <% $.vnfInventory.resourceModel %>
          nfv_model: <% $.vnfInventory.nfvModel %>
        publish-on-error:
          error_message: <% task(update_vnf_inventory_successful_rebuild).result %>
