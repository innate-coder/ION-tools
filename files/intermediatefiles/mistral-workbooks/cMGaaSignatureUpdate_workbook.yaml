---
version: '2.0'
name: aa-signature-update_workbook
workflows:

  aa-signature-update_starting:
    input:
      - operationType
      - operationParams
      - operationExecution
      - vnfInventory

    output:
      operationParams: <% $.operationParams %>
      operationType: <% $.operationType %>
      vnfInventory: <% $.vnfInventory %>
      stackParams: <% $.stackParams %>
      operationExecution: <% $.operationExecution %>
      originalResourceModel: <% $.vnfInventory.get(resourceModel, {}) %>
      flatResourceModel: <% $.flatResourceModel %>
      expectedModel: <% $.expectedModel %>
      activeMgSlotIds: <% $.activeMgSlotIds %>
      standbyMgSlotIds: <% $.standbyMgSlotIds %>
      activeMgImageVersions: <% $.activeMgImageVersions %>
      standbyMgImageVersions: <% $.standbyMgImageVersions %>

    output-on-error:
      error_message: <% $.get(error_message, 'Failure happened in aa-signature-update_starting workflow') %>

    tasks:
      prepare_stack_params:
        workflow: prepare_stack_params
        input:
          operationParams: <% $.operationParams %>
          vnfInventory: <% $.vnfInventory %>
        publish:
           stackParams: <% task(prepare_stack_params).result.stackParams %>
           vnfInventory: <% task(prepare_stack_params).result.vnfInventory %>
           expectedModel: <% task(prepare_stack_params).result.expectedModel %>
        publish-on-error:
           error_message: <% task(prepare_stack_params).result.error_message %>
        on-success:
          - prepare_ansible_inventory_initial

      prepare_ansible_inventory_initial:
        action: cbam.prepare_ansible_inventory
        input:
          vnf_inventory: <% $.vnfInventory %>
        publish:
          ansibleInventory: <% task(prepare_ansible_inventory_initial).result %>
        publish-on-error:
          error_message: <% task(prepare_ansible_inventory_initial).result %>
        on-success:
          - execute_initial_actions

      execute_initial_actions:
        action: cbam.run_playbook_extension
        input:
          action:
            ansible: ansible/aaSignatureUpdate/initialActions.yaml
          operation_parameters: <% $.operationParams %>
          vnf_inventory: <% $.vnfInventory %>
          stack_params: <% $.stackParams %>
          ansible_inventory: <% $.ansibleInventory %>
        publish:
          activeMgSlotIds: <% task(execute_initial_actions).result.activeMgSlotIds %>
          standbyMgSlotIds: <% task(execute_initial_actions).result.standbyMgSlotIds %>
          activeMgImageVersions: <% task(execute_initial_actions).result.activeMgImageVersions %>
          standbyMgImageVersions: <% task(execute_initial_actions).result.standbyMgImageVersions %>
        publish-on-error:
          error_message: <% task(execute_initial_actions).result %>
        on-success:
          - flatten_resource_model

      flatten_resource_model:
        action: cbam.hierarchical_to_flat_resource_model
        input:
          hierarchical_resource_model: <% $.vnfInventory.resourceModel %>
        publish:
          flatResourceModel: <% task(flatten_resource_model).result %>
        publish-on-error:
          error_message: <% task(flatten_resource_model).result %>

  aa-signature-update_processing:
    input:
      - operationType
      - operationParams
      - operationExecution
      - vnfInventory
      - stackParams
      - originalResourceModel
      - flatResourceModel
      - expectedModel
      - activeMgSlotIds
      - standbyMgSlotIds
      - activeMgImageVersions
      - standbyMgImageVersions

    output-on-error:
      error_message: <% $.get(error_message, 'Failure happened in aa-signature-update_processing workflow') %>

    tasks:
      get_nfv_machine_ids:
        action: std.javascript
        input:
          context:
            flatResourceModel: <% $.flatResourceModel %>
            activeMgSlotIds: <% $.activeMgSlotIds %>
            standbyMgSlotIds: <% $.standbyMgSlotIds %>
          script: |
            var slotIds = [];
            var mgNfvIds = [];
            var standbyMgNfvIds = [];
            var activeMgNfvIds = [];

            for(key in $.flatResourceModel) {
              if ((/mgRedundantAspectGroup.[0-9]+.mgWorking.mgInstanceGroup.0.mgServerInstance/.test(key)) || (/mgRedundantAspectGroup.[0-9]+.mgProtect.mgInstanceGroup.0.mgServerInstance/.test(key))) {
                  slotIds.push($.flatResourceModel[key].metadata.nokia_vnf_slotId);
                  mgNfvIds.push(key);
              }
            }
            var standbyMgLength = $.standbyMgSlotIds.length;
            for (var i = 0; i < standbyMgLength; i++) {
               var standbySlotIndex = slotIds.indexOf($.standbyMgSlotIds[i]);
               standbyMgNfvIds.push(mgNfvIds[standbySlotIndex]);
            }
            var activeMgLength = $.activeMgSlotIds.length;
            for (var i = 0; i < activeMgLength; i++) {
               var activeSlotIndex = slotIds.indexOf($.activeMgSlotIds[i]);
               activeMgNfvIds.push(mgNfvIds[activeSlotIndex]);
            }
            return [activeMgNfvIds,standbyMgNfvIds];
        publish:
          activeMgNfvIds: <% task(get_nfv_machine_ids).result[0] %>
          standbyMgNfvIds: <% task(get_nfv_machine_ids).result[1] %>
        publish-on-error:
          error_message: <% task(get_nfv_machine_ids).result %>
        on-success:
          - reinstantiate_standby: <% $.operationParams.additionalParams.get(vmReInstantiation) = true %>
          - rebuild_standby: <% $.operationParams.additionalParams.get(vmReInstantiation) = false %>

      reinstantiate_standby:
        workflow: reinstantiate_instances
        input:
          stackParams: <% $.stackParams %>
          mgInstanceNfvIds: <% $.standbyMgNfvIds %>
          vnfInventory: <% $.vnfInventory %>
          operationType: <% $.operationType %>
        publish:
          stackParams: <% task(reinstantiate_standby).result.stackParams %>
        publish-on-error:
          error_message: <% task(reinstantiate_standby).result.error_message %>
        on-success:
          - update_cbam_vnf_inventory_first_rebuild

      rebuild_standby:
        workflow: rebuild_instances
        input:
          stackParams: <% $.stackParams %>
          mgInstanceNfvIds: <% $.standbyMgNfvIds %>
          vnfInventory: <% $.vnfInventory %>
          operationType: <% $.operationType %>
        publish:
          stackParams: <% task(rebuild_standby).result.stackParams %>
        publish-on-error:
          error_message: <% task(rebuild_standby).result.error_message %>
        on-success:
          - update_cbam_vnf_inventory_first_rebuild

      update_cbam_vnf_inventory_first_rebuild:
        workflow: update_cbam_vnf_inventory
        input:
          vnfInventory: <% $.vnfInventory %>
          expectedModel: <% $.expectedModel %>
        publish-on-error:
          error_message: <% task(update_cbam_vnf_inventory_first_rebuild).result.error_message %>
        on-success:
          - populate_standby_slots_images_ansible

      populate_standby_slots_images_ansible:
        action: std.javascript
        input:
          context:
            stackParams: <% $.stackParams %>
            flatResourceModel: <% $.flatResourceModel %>
            standbyMgSlotIds: <% $.standbyMgSlotIds %>
            standbyMgImageVersions: <% $.standbyMgImageVersions %>
          script: |
            $.stackParams.cbam.resources.slotIdsToCheck = "['" + $.standbyMgSlotIds.map(s => `${s}`).join("','") + "']";
            $.stackParams.cbam.resources.imageVersions = "['" + $.standbyMgImageVersions.map(s => `${s}`).join("','") + "']";
            return $.stackParams
        publish:
          stackParams:  <% task(populate_standby_slots_images_ansible).result %>
        publish-on-error:
          error_message: <% task(populate_standby_slots_images_ansible).result %>
        on-success:
          - prepare_ansible_inventory_after_first_rebuild

      prepare_ansible_inventory_after_first_rebuild:
        action: cbam.prepare_ansible_inventory
        input:
          vnf_inventory: <% $.vnfInventory %>
        publish:
          ansibleInventory: <% task(prepare_ansible_inventory_after_first_rebuild).result %>
        publish-on-error:
          error_message: <% task(prepare_ansible_inventory_after_first_rebuild).result %>
        on-success:
          - standby_checks_after_first_rebuild

      standby_checks_after_first_rebuild:
        action: cbam.run_playbook_extension
        input:
          action:
            ansible: ansible/aaSignatureUpdate/verifyCardStatus.yaml
          operation_parameters: <% $.operationParams %>
          vnf_inventory: <% $.vnfInventory %>
          stack_params: <% $.stackParams %>
          ansible_inventory: <% $.ansibleInventory %>
        publish-on-error:
          error_message: <% task(standby_checks_after_first_rebuild).result %>
        on-success:
          - reinstantiate_active: <% $.operationParams.additionalParams.get(vmReInstantiation) = true %>
          - rebuild_active: <% $.operationParams.additionalParams.get(vmReInstantiation) = false %>

      reinstantiate_active:
        workflow: reinstantiate_instances
        input:
          stackParams: <% $.stackParams %>
          mgInstanceNfvIds: <% $.activeMgNfvIds %>
          vnfInventory: <% $.vnfInventory %>
          operationType: <% $.operationType %>
        publish:
          stackParams: <% task(reinstantiate_active).result.stackParams %>
        publish-on-error:
          error_message: <% task(reinstantiate_active).result.error_message %>
        on-success:
          - update_cbam_vnf_inventory_second_rebuild

      rebuild_active:
        workflow: rebuild_instances
        input:
          stackParams: <% $.stackParams %>
          mgInstanceNfvIds: <% $.activeMgNfvIds %>
          vnfInventory: <% $.vnfInventory %>
          operationType: <% $.operationType %>
        publish:
          stackParams: <% task(rebuild_active).result.stackParams %>
        publish-on-error:
          error_message: <% task(rebuild_active).result.error_message %>
        on-success:
          - update_cbam_vnf_inventory_second_rebuild

      update_cbam_vnf_inventory_second_rebuild:
        workflow: update_cbam_vnf_inventory
        input:
          vnfInventory: <% $.vnfInventory %>
          expectedModel: <% $.expectedModel %>
        publish-on-error:
          error_message: <% task(update_cbam_vnf_inventory_second_rebuild).result.error_message %>
        on-success:
          - populate_active_slots_images_after_second_rebuild

      populate_active_slots_images_after_second_rebuild:
        action: std.javascript
        input:
          context:
            stackParams: <% $.stackParams %>
            flatResourceModel: <% $.flatResourceModel %>
            activeMgSlotIds: <% $.activeMgSlotIds %>
            activeMgImageVersions: <% $.activeMgImageVersions %>
          script: |
            $.stackParams.cbam.resources.slotIdsToCheck = "['" + $.activeMgSlotIds.map(s => `${s}`).join("','") + "']";
            $.stackParams.cbam.resources.imageVersions = "['" + $.activeMgImageVersions.map(s => `${s}`).join("','") + "']";
            return $.stackParams
        publish:
          stackParams: <% task(populate_active_slots_images_after_second_rebuild).result %>
        publish-on-error:
          error_message: <% task(populate_active_slots_images_after_second_rebuild).result %>
        on-success:
          - prepare_ansible_inventory_after_second_rebuild

      prepare_ansible_inventory_after_second_rebuild:
        action: cbam.prepare_ansible_inventory
        input:
          vnf_inventory: <% $.vnfInventory %>
        publish:
          ansibleInventory: <% task(prepare_ansible_inventory_after_second_rebuild).result %>
        publish-on-error:
          error_message: <% task(prepare_ansible_inventory_after_second_rebuild).result %>
        on-success:
          - execute_playbook_after_second_rebuild

      execute_playbook_after_second_rebuild:
        action: cbam.run_playbook_extension
        input:
          action:
            ansible: ansible/aaSignatureUpdate/verifyCardStatus.yaml
          operation_parameters: <% $.operationParams %>
          vnf_inventory: <% $.vnfInventory %>
          stack_params: <% $.stackParams %>
          ansible_inventory: <% $.ansibleInventory %>
        publish-on-error:
          error_message: <% task(execute_playbook_after_second_rebuild).result %>

  prepare_stack_params:
    input:
      - operationParams
      - vnfInventory
    output:
      vnfInventory: <% $.vnfInventory %>
      stackParams: <% $.stackParams %>
      expectedModel: <% $.expectedModel %>

    output-on-error:
      error_message: <% $.get(error_message, 'Failure happened during preparing stack parameters') %>

    tasks:
      # Calculate the actual resource model
      generate_model_from_config:
        action: cbam.generate_model_from_config
        input:
          vnf_template: <% $.vnfInventory.vnfTemplate %>
          expected_nfv_model: <% $.vnfInventory.nfvModel %>
        publish:
          expectedModel: <% task(generate_model_from_config).result %>
        publish-on-error:
          error_message: <% task(generate_model_from_config).result %>
        on-success:
          - calculate_stack_params

      # Calculate the actutal stack parameters
      calculate_stack_params:
        action: cbam.calculate_stack_params
        input:
          vnf_inventory: <% $.vnfInventory %>
          expected_nfv_model: <% $.vnfInventory.nfvModel %>
          expected_model: <% $.expectedModel %>
        publish:
          stackParams: <% task(calculate_stack_params).result %>
        publish-on-error:
          error_message: <% task(calculate_stack_params).result %>
        on-success:
          - add_slotId_stack_params

      add_slotId_stack_params:
        action: cbam.evaluate_javascript
        input:
          javascript: javascript/assignSlotIDs.js
          include: []
          context:
            stack_params: <% $.stackParams %>
            resource_model: <% $.vnfInventory.resourceModel %>
            nfv_model: <% $.vnfInventory.nfvModel %>
            operation_params: <% $.operationParams %>
        publish:
          stackParams: <% task(add_slotId_stack_params).result %>
        publish-on-error:
          error_message: <% task(add_slotId_stack_params).result %>
        on-success:
          - add_zones_stack_params

      add_zones_stack_params:
        action: cbam.evaluate_javascript
        input:
          javascript: javascript/assignZones.js
          include: []
          context:
            stack_params: <% $.stackParams %>
            resource_model: <% $.vnfInventory.resourceModel %>
            nfv_model: <% $.vnfInventory.nfvModel %>
        publish:
          stackParams: <% task(add_zones_stack_params).result %>
        publish-on-error:
          error_message: <% task(add_zones_stack_params).result %>
        on-success:
          - add_cpCoresAndCfp_stack_params

      add_cpCoresAndCfp_stack_params:
        action: cbam.evaluate_javascript
        input:
          javascript: javascript/assignCpCoresAndCfp.js
          include: []
          context:
            stack_params: <% $.stackParams %>
            resource_model: <% $.vnfInventory.resourceModel %>
            nfv_model: <% $.vnfInventory.nfvModel %>
            operation_params: <% $.operationParams %>
        publish:
          stackParams: <% task(add_cpCoresAndCfp_stack_params).result %>
        publish-on-error:
          error_message: <% task(add_cpCoresAndCfp_stack_params).result %>
        on-success:
          - add_smbios_stack_params

      add_smbios_stack_params:
        action: cbam.evaluate_javascript
        input:
          javascript: javascript/generateSmbios.js
          include: []
          context:
            stack_params: <% $.stackParams %>
            resource_model: <% $.vnfInventory.resourceModel %>
            nfv_model: <% $.vnfInventory.nfvModel %>
            operation_params: <% $.operationParams %>
        publish:
          stackParams: <% task(add_smbios_stack_params).result %>
        publish-on-error:
          error_message: <% task(add_smbios_stack_params).result %>

  rebuild_instances:
    input:
      - stackParams
      - mgInstanceNfvIds
      - vnfInventory
      - operationType

    output:
      stackParams: <% $.stackParams %>

    output-on-error:
      error_message: <% $.get(error_message, 'VMs were not rebuilt successfully') %>

    tasks:
      modify_image:
        action: std.javascript
        input:
          context:
            stackParams: <% $.stackParams %>
            imageId: <% $.vnfInventory.nfvModel.swImages.cmgImage.vimSoftwareImageId %>
            mgInstanceNfvIds: <% $.mgInstanceNfvIds %>
          script: |
            for (var i=0; i<$.mgInstanceNfvIds.length; i++) {
              splittedVnfc = $.mgInstanceNfvIds[i].split('.')
              actual = $.stackParams.cbam.resources
              for (var z=0; z<splittedVnfc.length; z++) {
                actual = actual[splittedVnfc[z]]
                if (actual.hasOwnProperty('imageId')) {
                  actual.imageId = $.imageId
                  break
                }
              }
            }
            return $.stackParams
        publish:
          stackParams: <% task(modify_image).result %>
        publish-on-error:
          error_message: <% task(modify_image).result %>
        on-success:
          - rebuild_and_wait_stack

      rebuild_and_wait_stack:
        workflow: update_stack_and_wait
        input:
          vnfInventory: <% $.vnfInventory %>
          stackParams: <% $.stackParams %>
          operationType: <% $.operationType %>
        publish-on-error:
          error_message: <% task(rebuild_and_wait_stack).result.error_message %>

  reinstantiate_instances:
    input:
      - stackParams
      - mgInstanceNfvIds
      - vnfInventory
      - operationType

    output:
      stackParams: <% $.stackParams %>

    output-on-error:
      error_message: <% $.get(error_message, 'VMs were not re-instantiated successfully') %>

    tasks:
      set_vnfc_present_zero:
        action: std.javascript
        input:
          context:
            stackParams: <% $.stackParams %>
            mgInstanceNfvIds: <% $.mgInstanceNfvIds %>
          script: |
            for (var i=0; i<$.mgInstanceNfvIds.length; i++) {
              splittedVnfc = $.mgInstanceNfvIds[i].split('.')
              actual = $.stackParams.cbam.resources
              for (var z=0; z<splittedVnfc.length; z++) {
                actual = actual[splittedVnfc[z]]
                if (actual.hasOwnProperty('present')) {
                  actual.present = 0
                  break
                }
              }
            }
            return $.stackParams
        publish:
          stackParams: <% task(set_vnfc_present_zero).result %>
        publish-on-error:
          error_message: <% task(set_vnfc_present_zero).result %>
        on-success:
          - delete_instances

      delete_instances:
        workflow: update_stack_and_wait
        input:
          vnfInventory: <% $.vnfInventory %>
          stackParams: <% $.stackParams %>
          operationType: <% $.operationType %>
        publish-on-error:
          error_message: <% task(delete_instances).result.error_message %>
        on-success:
          - change_image_and_set_present_one

      change_image_and_set_present_one:
        action: std.javascript
        input:
          context:
            stackParams: <% $.stackParams %>
            imageId: <% $.vnfInventory.nfvModel.swImages.cmgImage.vimSoftwareImageId %>
            mgInstanceNfvIds: <% $.mgInstanceNfvIds %>
          script: |
            for (var i=0; i<$.mgInstanceNfvIds.length; i++) {
              splittedVnfc = $.mgInstanceNfvIds[i].split('.')
              actual = $.stackParams.cbam.resources
              for (var z=0; z<splittedVnfc.length; z++) {
                actual = actual[splittedVnfc[z]]
                if (actual.hasOwnProperty('present')) {
                  actual.present = 1
                }
                if (actual.hasOwnProperty('imageId')) {
                  actual.imageId = $.imageId
                  break
                }
              }
            }
            return $.stackParams
        publish:
          stackParams: <% task(change_image_and_set_present_one).result %>
        publish-on-error:
          error_message: <% task(change_image_and_set_present_one).result %>
        on-success:
          - create_instances

      create_instances:
        workflow: update_stack_and_wait
        input:
          vnfInventory: <% $.vnfInventory %>
          stackParams: <% $.stackParams %>
          operationType: <% $.operationType %>
        publish-on-error:
          error_message: <% task(create_instances).result.error_message %>

  update_stack_and_wait:
    input:
      - vnfInventory
      - stackParams
      - operationType

    output-on-error:
      error_message: <% $.get(error_message, 'Stack was not updated successfully') %>

    tasks:
      modify_stack_params:
        action: cbam.manipulate_stack
        input:
          vnf_inventory: <% $.vnfInventory %>
          stack_params: <% $.stackParams %>
          operation_type: <% $.operationType %>
        publish-on-error:
          error_message: <% task(modify_stack_params).result %>
        on-success:
          - wait_for_modify_stack_params_to_finish

      wait_for_modify_stack_params_to_finish:
        action: cbam.wait_for_stack
        input:
          stack_id: <% $.vnfInventory.get(stackId, null) %>
          operation_type: <% $.operationType %>
        publish-on-error:
          error_message: <% task(wait_for_modify_stack_params_to_finish).result %>

  update_cbam_vnf_inventory:
    input:
      - vnfInventory
      - expectedModel

    output-on-error:
      error_message: <% $.get(error_message, 'VNF Inventory was not updated successfully') %>

    tasks:
      query_heat_resources:
        action: cbam.query_heat_resources
        input:
          stack_id: <% $.vnfInventory.get(stackId) %>
        publish:
          vnfInventory: <% $.vnfInventory.set(resourceModel, task(query_heat_resources).result) %>
        publish-on-error:
          error_message: <% task(query_heat_resources).result %>
        on-success:
          - add_nfv_info_to_resource_model

      #Extend the resource model with NFV info with updated resources
      add_nfv_info_to_resource_model:
        action: cbam.add_nfv_info_to_resource_model
        input:
          expected_resource_model: <% $.expectedModel %>
          resource_model: <% $.vnfInventory.resourceModel %>
        publish:
          vnfInventory: <% $.vnfInventory.set(resourceModel, task(add_nfv_info_to_resource_model).result) %>
        publish-on-error:
          error_message: <% task(add_nfv_info_to_resource_model).result %>
        on-success:
          - query_heat_resource_metadata

      query_heat_resource_metadata:
        action: cbam.query_heat_resource_metadata
        input:
          resource_model: <% $.vnfInventory.resourceModel %>
        publish:
          vnfInventory: <% $.vnfInventory.set(resourceModel, task(query_heat_resource_metadata).result) %>
        publish-on-error:
          error_message: <% task(query_heat_resource_metadata).result %>
        on-success:
          - update_vnf_inventory_successful_rebuild

      update_vnf_inventory_successful_rebuild:
        action: cbam.update_vnf_inventory
        input:
          resource_model: <% $.vnfInventory.resourceModel %>
          nfv_model: <% $.vnfInventory.nfvModel %>
        publish-on-error:
          error_message: <% task(update_vnf_inventory_successful_rebuild).result %>
