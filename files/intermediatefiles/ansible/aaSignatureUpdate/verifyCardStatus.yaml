- name: CBAM-OAM
  hosts: oamAspectGroup.0.OAMActive.oamInstanceGroup.0.oamServerInstance
  connection: local
  gather_facts: False
  serial: 1

  vars:
    slotIdsToCheck: "{{ vnf_context_data.stack_params.cbam.resources.slotIdsToCheck }}"
    imageVersions: "{{ vnf_context_data.stack_params.cbam.resources.imageVersions }}"
    ansible_ssh_user: "{{ vnf_context_data.vnf_attributes.extensions.oamUsername }}"
    ansible_ssh_pass: "{{ vnf_context_data.vnf_attributes.extensions.oamPassword }}"
    oamActiveVirtualIp: "{{ vnf_context_data.vnf_attributes.extensions.oamActiveVirtualIp }}"
    cli:
      host: "{{ ansible_ssh_host }}"
      username: "{{ vnf_context_data.vnf_attributes.extensions.oamUsername }}"
      password: "{{ vnf_context_data.vnf_attributes.extensions.oamPassword }}"
      transport: cli
      timeout: 300

  pre_tasks:
    - name: Set OAM active virtual IP as current ansible host
      set_fact:
        ansible_ssh_host: "{{ oamActiveVirtualIp }}"
      when: oamActiveVirtualIp != ""

    - local_action:
        module: wait_for
          host={{ ansible_ssh_host }}
          port=22
          timeout=500
          state=started
      become: no

  tasks:
    - name: Wait for target MG VMs to come up
      sros_command:
        provider: "{{ cli }}"
        timeout: 300
        retries: "40"
        interval: "10"
        commands:
          - show card "{{ item }}"
        wait_for:
          - result[0] contains "up    up"
      with_items:
        - "{{ slotIdsToCheck }}"
      register: check_vm_state

    - name: Verify that ISSU state has been cleared from all target ISA-AA MDAs
      sros_command:
        provider: "{{ cli }}"
        timeout: 300
        retries: "40"
        interval: "10"
        commands:
          - show mda {{ item }} | match "isa-aa-v"
        wait_for:
          - result[0] contains "up        up"
      with_items:
        - "{{ slotIdsToCheck }}"
      register: verify_issu_cleared_mda

    - name: Verify that the relevant MG groups which include the already rebuilt MG VMs are in HOT state
      sros_command:
        provider: "{{ cli }}"
        timeout: 300
        retries: "40"
        interval: "10"
        commands:
          - show mobile-gateway system card {{ item }} | match "Redundancy"
        wait_for:
          - result[0] contains "Hot"
      with_items:
        - "{{ slotIdsToCheck }}"
      register: verify_redundancy_hot

    - name: Check that application assurance version has been updated for all target MG VMs
      sros_command:
        provider: "{{ cli }}"
        timeout: 300
        retries: "40"
        interval: "10"
        commands:
          - show application-assurance version | match "{{ item[0] }}/" | match "{{ item[1] }}"
        wait_for:
          - result[0] contains ""
      with_together:
        - "{{ slotIdsToCheck }}"
        - "{{ imageVersions }}"
      register: check_aa_version_after_rebuild
