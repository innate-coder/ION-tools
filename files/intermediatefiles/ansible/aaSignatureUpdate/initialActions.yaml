- name: CBAM-OAM
  hosts: oamAspectGroup.0.OAMActive.oamInstanceGroup.0.oamServerInstance
  connection: local
  gather_facts: False
  serial: 1

  vars:
    slotIdAnsible: "{{ vnf_context_data.stack_params.cbam.resources.slotIdAnsible }}"
    ansible_ssh_user: "{{ vnf_context_data.vnf_attributes.extensions.oamUsername }}"
    ansible_ssh_pass: "{{ vnf_context_data.vnf_attributes.extensions.oamPassword }}"
    oamActiveVirtualIp: "{{ vnf_context_data.vnf_attributes.extensions.oamActiveVirtualIp }}"
    cli:
      host: "{{ ansible_ssh_host }}"
      username: "{{ vnf_context_data.vnf_attributes.extensions.oamUsername }}"
      password: "{{ vnf_context_data.vnf_attributes.extensions.oamPassword }}"
      transport: cli
      timeout: 800

  pre_tasks:
    - name: Set OAM active virtual IP as current ansible host
      set_fact:
        ansible_ssh_host: "{{ oamActiveVirtualIp }}"
      when: oamActiveVirtualIp != ""

    - local_action:
        module: wait_for
          host={{ ansible_ssh_host }}
          port=22
          timeout=500
          state=started
      become: no

  tasks:
    - name: "Verify overall system health state"
      sros_command:
        provider: "{{ cli }}"
        timeout: 300
        retries: "400"
        interval: "1"
        commands:
          - show card "{{ item }}"
        wait_for:
          - result[0] contains "up    up"
      with_items:
        - "{{ slotIdAnsible }}"

    - name: Execute command for displaying CPM application assurance version
      sros_command:
        provider: "{{ cli }}"
        timeout: 300
        retries: "40"
        interval: "10"
        commands:
          - show application-assurance version | match "CPM"
      register: original_aa_version_cpm

    - name: Parse and retrieve the current software version
      delegate_to: localhost
      raw: echo "{{ original_aa_version_cpm.stdout[0] }}" | awk {'print $3'}
      register: get_original_software_version

    - name: Synchronize the new TIM file to the standby OAM-VM
      sros_command:
        provider: "{{ cli }}"
        timeout: 800
        retries: "80"
        interval: "10"
        commands:
          - admin redundancy synchronize boot-env
        wait_for:
          - result[0] contains "Completed"
      register: synchronize_tim

    - name: Check for TIM synchronization execution failures
      fail: msg="Execution of synchronization action was not completed successfully"
      register: check_synchronize_tim
      failed_when: '"MINOR" in synchronize_tim.stdout[0] or "MAJOR" in synchronize_tim.stdout[0] or "ERROR" in synchronize_tim.stdout[0] or "INFO" in synchronize_tim.stdout[0] or "WARNING" in synchronize_tim.stdout[0] or "CRITICAL" in synchronize_tim.stdout[0]'

    - name: Trigger active OAM to read the new TIM file
      sros_command:
        provider: "{{ cli }}"
        timeout: 300
        retries: "40"
        interval: "10"
        commands:
          - admin application-assurance upgrade
      register: trigger_oam_upgrade

    - name: Check for application assurance upgrade execution failures
      fail: msg="Execution of application assurance upgrade action was not completed successfully"
      register: oam_upgrade_check
      failed_when: '"MINOR" in trigger_oam_upgrade.stdout[0] or "MAJOR" in trigger_oam_upgrade.stdout[0] or "ERROR" in trigger_oam_upgrade.stdout[0] or "INFO" in trigger_oam_upgrade.stdout[0] or "WARNING" in trigger_oam_upgrade.stdout[0] or "CRITICAL" in trigger_oam_upgrade.stdout[0]'

    - name: Get updated application assurance version for CPM
      sros_command:
        provider: "{{ cli }}"
        timeout: 300
        retries: "40"
        interval: "10"
        commands:
          - show application-assurance version | match "CPM"
      register: updated_aa_version

    - name: Parse and retrieve the updated AA version
      delegate_to: localhost
      raw: echo "{{ updated_aa_version.stdout[0] }}" | awk {'print $3'}
      register: get_updated_software_version

    - name: Verify that CPM has been upgraded with the new AA TIM file
      fail: msg="CPM was not upgraded with the new image"
      register: verify_cpm_upgrade
      failed_when: '"{{ get_original_software_version.stdout | regex_replace("\n","") }}" == "{{ get_updated_software_version.stdout | regex_replace("\n","") }}"'

    - name: Get current MDA status for application assurance
      sros_command:
        provider: "{{ cli }}"
        timeout: 300
        retries: "40"
        interval: "10"
        commands:
          - show mda | match "isa-aa-v"
      register: mda_aa_status

    - name: Iterate over MDA output and look for ISSU state
      delegate_to: localhost
      raw: if [[ "{{ item }}" == *"ISSU"* ]]; then echo "true"; else echo "false"; fi
      register: iterate_mda_output
      with_items:
        - "{{ mda_aa_status.stdout_lines[0] }}"

    - name: Verify that all application assurance MDAs are in ISSU state
      fail: msg="MDA application assurance status was not found in ISSU state"
      register: verify_issu_present_mda
      failed_when: '"{{ item.stdout_lines[0] }}" == "false"'
      with_items:
        - "{{ iterate_mda_output.results }}"

    - name: Display output with current standby MG VM slot ids
      sros_command:
        provider: "{{ cli }}"
        timeout: 300
        retries: "40"
        interval: "10"
        commands:
          - show mobile-gateway system | match "standby"
      register: output_standby_mgvms

    - name: Display output with current active MG VM slot ids
      sros_command:
        provider: "{{ cli }}"
        timeout: 300
        retries: "40"
        interval: "10"
        commands:
          - show mobile-gateway system | match "active"
      register: output_active_mgvms

    - name: Parse output and retrieve current standby MG VM slot ids
      delegate_to: localhost
      raw: printf "{{ item }}" | awk {'print $3'} | sed 's:.*/::'
      register: get_standby_mg_slots
      with_items:
        - "{{ output_standby_mgvms.stdout_lines[0] }}"

    - name: Parse output and retrieve current active MG VM slot ids
      delegate_to: localhost
      raw: printf "{{ item }}" | awk {'print $3'} | sed 's:.*/::'
      register: get_active_mg_slots
      with_items:
        - "{{ output_active_mgvms.stdout_lines[0] }}"

    - name: Initialize two empty lists for storing active and standby MG VM slot ids
      set_fact:
        activeMgSlotIds: []
        standbyMgSlotIds: []

    - name: Append MG active and standby slot ids to empty lists
      set_fact:
        activeMgSlotIds: "{{ activeMgSlotIds + item[0].stdout_lines }}"
        standbyMgSlotIds: "{{ standbyMgSlotIds + item[1].stdout_lines }}"
      with_together:
        - "{{ get_active_mg_slots.results }}"
        - "{{ get_standby_mg_slots.results }}"

    - name: Display current image versions for MG active cards
      sros_command:
        provider: "{{ cli }}"
        timeout: 300
        retries: "40"
        interval: "10"
        commands:
          - show application-assurance version |  match "{{ item }}/"
      with_items:
        - "{{ activeMgSlotIds }}"
      register: image_output_active

    - name: Display current image versions for MG standby cards
      sros_command:
        provider: "{{ cli }}"
        timeout: 300
        retries: "40"
        interval: "10"
        commands:
          - show application-assurance version |  match "{{ item }}/"
      with_items:
        - "{{ standbyMgSlotIds }}"
      register: image_output_standby

    - name: Parse output and retrieve current standby MG VM image versions
      delegate_to: localhost
      raw: printf "{{ item.stdout_lines[0] | join ('\n') }}" | awk {'print $3'}
      register: get_standby_mg_images
      with_items:
        - "{{ image_output_standby.results }}"

    - name: Parse output and retrieve current active MG VM image versions
      delegate_to: localhost
      raw: printf "{{ item.stdout_lines[0] | join ('\n') }}" | awk {'print $3'}
      register: get_active_mg_images
      with_items:
        - "{{ image_output_active.results }}"

    - name: Initialize two empty lists for storing active and standby MG VM image versions
      set_fact:
        activeMgImageVersions: []
        standbyMgImageVersions: []

    - name: Append MG active and standby image versions to empty lists
      set_fact:
        activeMgImageVersions: "{{ activeMgImageVersions + item[0].stdout_lines }}"
        standbyMgImageVersions: "{{ standbyMgImageVersions + item[1].stdout_lines }}"
      with_together:
        - "{{ get_active_mg_images.results }}"
        - "{{ get_standby_mg_images.results }}"

    - name: "Generate ansible execution result"
      local_action: >
        copy
        content='
          {
            "activeMgSlotIds": {{ activeMgSlotIds | to_json }},
            "standbyMgSlotIds": {{ standbyMgSlotIds | to_json }},
            "activeMgImageVersions": {{ activeMgImageVersions | to_json }},
            "standbyMgImageVersions": {{ standbyMgImageVersions | to_json }}
          }'
        dest="{{ playbook_dir }}/../../ansible-execution-result.json"
